// Fonction qui retourne le produit scalaire de 2 vecteurs
FUNCTION dot_product(v1,v2 : ARRAY_OF FLOAT[2]) : FLOAT
VAR
    ps: FLOAT :=0;
    i,j: INTEGER;
BEGIN
    // DÃ©terminons le produit scalaire
    FOR i FROM 0 TO v1.length-1 DO
        FOR j FROM v2.length-1 TO 0 DO
            IF (v1[i] <> v2[j]) THEN
                ps := ps + (v1[i]*v2[j]);
            END_IF
        END_FOR
    END_FOR
    RETURN ps;
END

// Algorithm principal
ALGORITHM produitScalaire
VAR
    i, j, n : INTEGER;
    prod : FLOAT;
    vect :	STRUCT
                v1 : ARRAY_OF FLOAT[2];
                v2 : ARRAY_OF FLOAT[2];
                next : ^vect;
            END_STRUCT
    v : ^vect := null;
    first : ^vect := null;
BEGIN
    // initialisons du nombre de couple de vecteurs
    write("Veuillez entrer le nombre de couple");
    read(n);
    // remplissage des vecteurs
    FOR i FROM 0 TO n-1 DO
        v := create(vect);
        write("Entrer les valeurs pour le vecteur V1");
        FOR j FROM 0 TO v1.length-1 DO
            read(v^.v1[j]);
        END_FOR
        write("Entrer les valeurs pour le vecteur V2");
        FOR j FROM 0 TO v2.length-1 DO
            read(v^.v2[j]);
        END_FOR
        v^.next := first;
        first := v;
    END_FOR
    // Appel de la fonction  
    FOR i FROM 0 TO n-1 DO
        prod := dot_product(v^.v1,v^.v2); 
        write("le produit scalaire est : ",prod);
        IF (prod = 0) THEN
            write("les deux vecteurs sont orthogonaux");
        ELSE
            write("les deux vecteurs ne sont pas orthogonaux");
        END_IF
        v^.next := first;
        first := v;
    END_FOR
END